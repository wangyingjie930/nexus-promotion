# .github/workflows/docker-image.yml

name: Docker Image CI

# 1. 触发工作流的条件
on:
  push:
    branches: [ "main" ] # 当有代码推送到 main 分支时触发
    tags:
      - 'v*' # 当有 'v' 开头的 tag 推送时触发, e.g., v1.0, v2.1.3
  pull_request:
    branches: [ "main" ] # 当有针对 main 分支的 Pull Request 时触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟机环境

    steps:
      # 2. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3. 设置 QEMU (可选, 为了更好地支持多平台构建)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 4. 设置 Docker Buildx (新一代的Docker构建工具)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. 登录到你的容器镜像仓库 (例如 Docker Hub, Aliyun ACR, Harbor 等)
      #    为了安全，需要先在 GitHub 的 Secrets 中配置用户名和密码
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' # PR时不登录，只构建
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. 为镜像生成元数据 (标签)
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            # 替换成你的 Docker Hub 用户名 / 组织名
            yingjiewang/nexus-promotion
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      # 7. 构建并推送镜像
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          # 对于 PR 事件，只构建不推送
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # 使用 GitHub Actions 的缓存
          cache-to: type=gha,mode=max